# -*- coding: utf-8 -*-
"""
Created on Fri Aug  3 14:55:54 2018

@author: sridh
"""

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import csv

dataO = pd.read_csv('v9mal.csv')

#Creating Lists for month and days
months = ['January', 'February', 'March','April', 'May', 'June', 'July', 'August', 'September','October' , 'November' , 'December']

days = ['Monday','Tuesday', 'Wednesday','Thursday','Friday','Saturday','Sunday']

i = 0
j = 0
x = 0
switch = 1
#currmonth = months[i]
#currday = days[j]
#generating new dataset by filtering it with high level time stamps
while i < 12:
    currmonth = months[i]
    j = 0
    while j < 7:
        newdata = dataO.loc[dataO['Month'] == months[i]]
        newdata = newdata.loc[newdata['Day'] == days[j]]
        print (months[i]+' '+days[j]+ ' '+str(len(newdata)))
        if len(newdata) >= 1667:
            newdata = newdata.sample(1667)
        #newdata = newdata.iloc[:,1]
            newdata = newdata.reset_index(drop=True)
            #newdata = newdata.iloc[:,1:11]
        else:
            newdata = newdata    
        if switch == 1:
            newdatax = newdata
            switch = 0
        else:
            newdatax = newdatax.append(newdata)
            newdatax = newdatax.reset_index(drop=True)
        j= j+1
    i= i+1
newdatax.to_csv('v9malnew.csv',sep=',')

#Building Block based data

data = pd.read_csv('v9malnew.csv')


#Setting the Block size to be 100
blocksize = 99
start = 0 
i = 0

while blocksize <= len(data):
    if i == 0:
        #This executes only once to write to file with meta-data
        with open('v9mal100.csv', 'a') as csvfile:
            fieldss = ['year','month','day','weekday/weekend','cpumin', 'cpumax', 'cpumean', 'cpuq1', 'cpuq2', 'cpuq3', 'cpustd', 'cpuvar','batterymin', 'batterymax', 'batterymean', 'batteryq1', 'batteryq2', 'batteryq3', 'batterystd', 'batteryvar','memorymin', 'memorymax', 'memorymean', 'memoryq1', 'memoryq2', 'memoryq3', 'memorystd', 'memoryvar','Networkmin', 'Networkmax', 'Networkmean', 'Networkq1', 'Networkq2', 'Networkq3', 'Networkstd', 'Networkvar','type','application']
            writer = csv.DictWriter(csvfile, fieldnames=fieldss)
            writer.writeheader()
            writer.writerow({'year' : data.iloc[blocksize]['Year'],'month':data.iloc[blocksize]['Month'],'day':data.iloc[blocksize]['Day'],'weekday/weekend' : data.iloc[blocksize]['Weekday/Weekend'] ,'cpumin': data.iloc[start:blocksize]['cpu'].min(), 'cpumax': data.iloc[start:blocksize]['cpu'].max(), 'cpumean': data.iloc[start:blocksize]['cpu'].mean(), 'cpuq1': data.iloc[start:blocksize]['cpu'].quantile(q=0.25), 'cpuq2': data.iloc[start:blocksize]['cpu'].quantile(q=0.5), 'cpuq3': data.iloc[start:blocksize]['cpu'].quantile(q=0.75), 'cpustd': data.iloc[start:blocksize]['cpu'].std(), 'cpuvar': data.iloc[start:blocksize]['cpu'].var(),'batterymin': data.iloc[start:blocksize]['battery'].min(), 'batterymax': data.iloc[start:blocksize]['battery'].max(), 'batterymean': data.iloc[start:blocksize]['battery'].mean(), 'batteryq1': data.iloc[start:blocksize]['battery'].quantile(q=0.25), 'batteryq2': data.iloc[start:blocksize]['battery'].quantile(q=0.5), 'batteryq3': data.iloc[start:blocksize]['battery'].quantile(q=0.75), 'batterystd': data.iloc[start:blocksize]['battery'].std(), 'batteryvar': data.iloc[start:blocksize]['battery'].var(), 'memorymin': data.iloc[start:blocksize]['memory'].min(), 'memorymax': data.iloc[start:blocksize]['memory'].max(), 'memorymean': data.iloc[start:blocksize]['memory'].mean(), 'memoryq1': data.iloc[start:blocksize]['memory'].quantile(q=0.25), 'memoryq2': data.iloc[start:blocksize]['memory'].quantile(q=0.5), 'memoryq3': data.iloc[start:blocksize]['memory'].quantile(q=0.75), 'memorystd': data.iloc[start:blocksize]['memory'].std(), 'memoryvar': data.iloc[start:blocksize]['memory'].var() , 'Networkmin': data.iloc[start:blocksize]['Network'].min(), 'Networkmax': data.iloc[start:blocksize]['Network'].max(), 'Networkmean': data.iloc[start:blocksize]['Network'].mean(), 'Networkq1': data.iloc[start:blocksize]['Network'].quantile(q=0.25), 'Networkq2': data.iloc[start:blocksize]['Network'].quantile(q=0.5), 'Networkq3': data.iloc[start:blocksize]['Network'].quantile(q=0.75), 'Networkstd': data.iloc[start:blocksize]['Network'].std(), 'Networkvar': data.iloc[start:blocksize]['Network'].var(),'type':data.iloc[blocksize]['type'],'application':data.iloc[blocksize]['application']})
            i = 1
    else:
        #this executes number of times with just the data
        with open('v9mal100.csv', 'a') as csvfile:
            fieldss = ['year','month','day','weekday/weekend','cpumin', 'cpumax', 'cpumean', 'cpuq1', 'cpuq2', 'cpuq3', 'cpustd', 'cpuvar','batterymin', 'batterymax', 'batterymean', 'batteryq1', 'batteryq2', 'batteryq3', 'batterystd', 'batteryvar','memorymin', 'memorymax', 'memorymean', 'memoryq1', 'memoryq2', 'memoryq3', 'memorystd', 'memoryvar','Networkmin', 'Networkmax', 'Networkmean', 'Networkq1', 'Networkq2', 'Networkq3', 'Networkstd', 'Networkvar','type','application']
            writer = csv.DictWriter(csvfile, fieldnames=fieldss)
            writer.writerow({'year' : data.iloc[blocksize]['Year'],'month':data.iloc[blocksize]['Month'],'day':data.iloc[blocksize]['Day'],'weekday/weekend' : data.iloc[blocksize]['Weekday/Weekend'] ,'cpumin': data.iloc[start:blocksize]['cpu'].min(), 'cpumax': data.iloc[start:blocksize]['cpu'].max(), 'cpumean': data.iloc[start:blocksize]['cpu'].mean(), 'cpuq1': data.iloc[start:blocksize]['cpu'].quantile(q=0.25), 'cpuq2': data.iloc[start:blocksize]['cpu'].quantile(q=0.5), 'cpuq3': data.iloc[start:blocksize]['cpu'].quantile(q=0.75), 'cpustd': data.iloc[start:blocksize]['cpu'].std(), 'cpuvar': data.iloc[start:blocksize]['cpu'].var(),'batterymin': data.iloc[start:blocksize]['battery'].min(), 'batterymax': data.iloc[start:blocksize]['battery'].max(), 'batterymean': data.iloc[start:blocksize]['battery'].mean(), 'batteryq1': data.iloc[start:blocksize]['battery'].quantile(q=0.25), 'batteryq2': data.iloc[start:blocksize]['battery'].quantile(q=0.5), 'batteryq3': data.iloc[start:blocksize]['battery'].quantile(q=0.75), 'batterystd': data.iloc[start:blocksize]['battery'].std(), 'batteryvar': data.iloc[start:blocksize]['battery'].var(), 'memorymin': data.iloc[start:blocksize]['memory'].min(), 'memorymax': data.iloc[start:blocksize]['memory'].max(), 'memorymean': data.iloc[start:blocksize]['memory'].mean(), 'memoryq1': data.iloc[start:blocksize]['memory'].quantile(q=0.25), 'memoryq2': data.iloc[start:blocksize]['memory'].quantile(q=0.5), 'memoryq3': data.iloc[start:blocksize]['memory'].quantile(q=0.75), 'memorystd': data.iloc[start:blocksize]['memory'].std(), 'memoryvar': data.iloc[start:blocksize]['memory'].var() , 'Networkmin': data.iloc[start:blocksize]['Network'].min(), 'Networkmax': data.iloc[start:blocksize]['Network'].max(), 'Networkmean': data.iloc[start:blocksize]['Network'].mean(), 'Networkq1': data.iloc[start:blocksize]['Network'].quantile(q=0.25), 'Networkq2': data.iloc[start:blocksize]['Network'].quantile(q=0.5), 'Networkq3': data.iloc[start:blocksize]['Network'].quantile(q=0.75), 'Networkstd': data.iloc[start:blocksize]['Network'].std(), 'Networkvar': data.iloc[start:blocksize]['Network'].var(),'type':data.iloc[blocksize]['type'],'application':data.iloc[blocksize]['application']})
            
    start = blocksize
    blocksize = blocksize + 100
"""    
newdata.to_csv('v1bennew.csv',sep=',')
    while size <= len(newdata):
        if x == 0:
            with open('v1bennew.csv', 'a') as csvfile:
                fieldss = ['Year', 'Month', 'Day', 'Weekday/Weekend', 'cpu', 'battery', 'memory', 'Network']
                writer = csv.DictWriter(csvfile, fieldnames=fieldss)
                writer.writeheader()
                writer.writerow({'Year': newdata['Year'],'Month': newdata['Month'],'Day': newdata['Day'],'Weekday/Weekend': newdata['Weekday/Weekend'],'cpu': newdata['cpu'],'battery': newdata['battery'],'memory': newdata['memory'],'Network': newdata['Network']})
                x = 1
        else:
            with open('v1bennew.csv', 'a') as csvfile:
                fieldss = ['Year', 'Month', 'Day', 'Weekday/Weekend', 'cpu', 'battery', 'memory', 'Network']
                writer = csv.DictWriter(csvfile, fieldnames=fieldss)
                #writer.writeheader()
                writer.writerow({'Year': newdata['Year'],'Month': newdata['Month'],'Day': newdata['Day'],'Weekday/Weekend': newdata['Weekday/Weekend'],'cpu': newdata['cpu'],'battery': newdata['battery'],'memory': newdata['memory'],'Network': newdata['Network']})
        size = size + 1
"""
                    

data = pd.read_csv('finalds25.csv',sep=',')


data = data.sample(94647)
data = data.reset_index(drop=True)